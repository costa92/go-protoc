// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 用户登录失败，身份验证未通过
func IsUserLoginFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserLoginFailed.String() && e.Code == 401
}

// 用户登录失败，身份验证未通过
func ErrorUserLoginFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_UserLoginFailed.String(), fmt.Sprintf(format, args...))
}

// 用户已存在，无法创建用户
func IsUserAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserAlreadyExists.String() && e.Code == 409
}

// 用户已存在，无法创建用户
func ErrorUserAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_UserAlreadyExists.String(), fmt.Sprintf(format, args...))
}

// 用户未找到，可能是用户不存在或输入的用户标识有误
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserNotFound.String() && e.Code == 404
}

// 用户未找到，可能是用户不存在或输入的用户标识有误
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_UserNotFound.String(), fmt.Sprintf(format, args...))
}

// 创建用户失败，可能是由于服务器或其他问题导致的创建过程中的错误
func IsUserCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserCreateFailed.String() && e.Code == 541
}

// 创建用户失败，可能是由于服务器或其他问题导致的创建过程中的错误
func ErrorUserCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(541, ErrorReason_UserCreateFailed.String(), fmt.Sprintf(format, args...))
}

// 用户操作被禁止，可能是由于权限不足或其他安全限制导致的
func IsUserOperationForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserOperationForbidden.String() && e.Code == 403
}

// 用户操作被禁止，可能是由于权限不足或其他安全限制导致的
func ErrorUserOperationForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_UserOperationForbidden.String(), fmt.Sprintf(format, args...))
}

// 密钥达到最大数量限制，无法继续创建新密钥
func IsSecretReachMaxCount(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SecretReachMaxCount.String() && e.Code == 400
}

// 密钥达到最大数量限制，无法继续创建新密钥
func ErrorSecretReachMaxCount(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_SecretReachMaxCount.String(), fmt.Sprintf(format, args...))
}

// 密钥未找到，可能是由于密钥不存在或输入的密钥标识有误
func IsSecretNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SecretNotFound.String() && e.Code == 404
}

// 密钥未找到，可能是由于密钥不存在或输入的密钥标识有误
func ErrorSecretNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_SecretNotFound.String(), fmt.Sprintf(format, args...))
}

// 创建密钥失败，可能是由于服务器或其他问题导致的创建过程中的错误
func IsSecretCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SecretCreateFailed.String() && e.Code == 541
}

// 创建密钥失败，可能是由于服务器或其他问题导致的创建过程中的错误
func ErrorSecretCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(541, ErrorReason_SecretCreateFailed.String(), fmt.Sprintf(format, args...))
}

// JWT令牌无效，可能是签名错误、格式错误或已被篡改
func IsJWTTokenInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_JWTTokenInvalid.String() && e.Code == 401
}

// JWT令牌无效，可能是签名错误、格式错误或已被篡改
func ErrorJWTTokenInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_JWTTokenInvalid.String(), fmt.Sprintf(format, args...))
}

// JWT令牌已过期，需要重新获取令牌
func IsJWTTokenExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_JWTTokenExpired.String() && e.Code == 401
}

// JWT令牌已过期，需要重新获取令牌
func ErrorJWTTokenExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_JWTTokenExpired.String(), fmt.Sprintf(format, args...))
}

// JWT令牌格式错误，无法解析
func IsJWTTokenMalformed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_JWTTokenMalformed.String() && e.Code == 401
}

// JWT令牌格式错误，无法解析
func ErrorJWTTokenMalformed(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_JWTTokenMalformed.String(), fmt.Sprintf(format, args...))
}

// JWT令牌尚未生效，当前时间早于令牌的生效时间
func IsJWTTokenNotValidYet(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_JWTTokenNotValidYet.String() && e.Code == 401
}

// JWT令牌尚未生效，当前时间早于令牌的生效时间
func ErrorJWTTokenNotValidYet(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_JWTTokenNotValidYet.String(), fmt.Sprintf(format, args...))
}

// JWT令牌缺失，请求头中未包含Authorization字段
func IsJWTTokenMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_JWTTokenMissing.String() && e.Code == 401
}

// JWT令牌缺失，请求头中未包含Authorization字段
func ErrorJWTTokenMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_JWTTokenMissing.String(), fmt.Sprintf(format, args...))
}

// JWT令牌格式不正确，应为Bearer {token}格式
func IsJWTTokenFormatInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_JWTTokenFormatInvalid.String() && e.Code == 401
}

// JWT令牌格式不正确，应为Bearer {token}格式
func ErrorJWTTokenFormatInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_JWTTokenFormatInvalid.String(), fmt.Sprintf(format, args...))
}

// JWT签名方法不匹配，令牌使用了不支持的签名算法
func IsJWTSigningMethodMismatch(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_JWTSigningMethodMismatch.String() && e.Code == 401
}

// JWT签名方法不匹配，令牌使用了不支持的签名算法
func ErrorJWTSigningMethodMismatch(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_JWTSigningMethodMismatch.String(), fmt.Sprintf(format, args...))
}
